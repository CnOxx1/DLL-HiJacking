


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 头文件
#include <Windows.h>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
#pragma comment(linker, "/EXPORT:AddClientRule=AheadLib_AddClientRule,@1")
#pragma comment(linker, "/EXPORT:AddClientRuleEx=AheadLib_AddClientRuleEx,@2")
#pragma comment(linker, "/EXPORT:AddClientSessionSuffix=AheadLib_AddClientSessionSuffix,@3")
#pragma comment(linker, "/EXPORT:AddClientTypeRule=AheadLib_AddClientTypeRule,@4")
#pragma comment(linker, "/EXPORT:AddExceptionProcessId=AheadLib_AddExceptionProcessId,@5")
#pragma comment(linker, "/EXPORT:AddExceptionRule=AheadLib_AddExceptionRule,@6")
#pragma comment(linker, "/EXPORT:AddExceptionRuleEx=AheadLib_AddExceptionRuleEx,@7")
#pragma comment(linker, "/EXPORT:AddHiddenFileName=AheadLib_AddHiddenFileName,@8")
#pragma comment(linker, "/EXPORT:AddPidToIgnoreHiddenFile=AheadLib_AddPidToIgnoreHiddenFile,@9")
#pragma comment(linker, "/EXPORT:AddProtectedFile=AheadLib_AddProtectedFile,@10")
#pragma comment(linker, "/EXPORT:AddProtectedFileEx=AheadLib_AddProtectedFileEx,@11")
#pragma comment(linker, "/EXPORT:AddRule=AheadLib_AddRule,@12")
#pragma comment(linker, "/EXPORT:CleanupAllClientRules=AheadLib_CleanupAllClientRules,@13")
#pragma comment(linker, "/EXPORT:CleanupAllClientTypeRules=AheadLib_CleanupAllClientTypeRules,@14")
#pragma comment(linker, "/EXPORT:CleanupAllRules=AheadLib_CleanupAllRules,@15")
#pragma comment(linker, "/EXPORT:ClearAllExceptionProcessId=AheadLib_ClearAllExceptionProcessId,@16")
#pragma comment(linker, "/EXPORT:ClearAllExceptionRules=AheadLib_ClearAllExceptionRules,@17")
#pragma comment(linker, "/EXPORT:CloseClientHandle=AheadLib_CloseClientHandle,@18")
#pragma comment(linker, "/EXPORT:CloseClientSession=AheadLib_CloseClientSession,@19")
#pragma comment(linker, "/EXPORT:CreateClientHandle=AheadLib_CreateClientHandle,@20")
#pragma comment(linker, "/EXPORT:CreateClientSession=AheadLib_CreateClientSession,@21")
#pragma comment(linker, "/EXPORT:GetClientSessionHandle=AheadLib_GetClientSessionHandle,@22")
#pragma comment(linker, "/EXPORT:Install=AheadLib_Install,@23")
#pragma comment(linker, "/EXPORT:NotifyDriverClientResult=AheadLib_NotifyDriverClientResult,@24")
#pragma comment(linker, "/EXPORT:NotifyDriverResult=AheadLib_NotifyDriverResult,@25")
#pragma comment(linker, "/EXPORT:QueryDriverVersion=AheadLib_QueryDriverVersion,@26")
#pragma comment(linker, "/EXPORT:QueryProtectedInformation=AheadLib_QueryProtectedInformation,@27")
#pragma comment(linker, "/EXPORT:RemoveAllHiddenFileName=AheadLib_RemoveAllHiddenFileName,@28")
#pragma comment(linker, "/EXPORT:RemoveAllProtectedFile=AheadLib_RemoveAllProtectedFile,@29")
#pragma comment(linker, "/EXPORT:RemoveAllProtectedFileEx=AheadLib_RemoveAllProtectedFileEx,@30")
#pragma comment(linker, "/EXPORT:RemoveClientAllProcessNameType=AheadLib_RemoveClientAllProcessNameType,@31")
#pragma comment(linker, "/EXPORT:RemoveClientRule=AheadLib_RemoveClientRule,@32")
#pragma comment(linker, "/EXPORT:RemoveClientSessionAllSuffix=AheadLib_RemoveClientSessionAllSuffix,@33")
#pragma comment(linker, "/EXPORT:RemoveClientTypeRule=AheadLib_RemoveClientTypeRule,@34")
#pragma comment(linker, "/EXPORT:RemoveExceptionProcessId=AheadLib_RemoveExceptionProcessId,@35")
#pragma comment(linker, "/EXPORT:RemoveExceptionRule=AheadLib_RemoveExceptionRule,@36")
#pragma comment(linker, "/EXPORT:RemoveHiddenFileName=AheadLib_RemoveHiddenFileName,@37")
#pragma comment(linker, "/EXPORT:RemoveProtectedFile=AheadLib_RemoveProtectedFile,@38")
#pragma comment(linker, "/EXPORT:RemoveProtectedFileEx=AheadLib_RemoveProtectedFileEx,@39")
#pragma comment(linker, "/EXPORT:ReplyClientResult=AheadLib_ReplyClientResult,@40")
#pragma comment(linker, "/EXPORT:SetClientProcessIdType=AheadLib_SetClientProcessIdType,@41")
#pragma comment(linker, "/EXPORT:SetClientProcessNameType=AheadLib_SetClientProcessNameType,@42")
#pragma comment(linker, "/EXPORT:SetClientSessionClientConfig=AheadLib_SetClientSessionClientConfig,@43")
#pragma comment(linker, "/EXPORT:SetClientSessionTimeout=AheadLib_SetClientSessionTimeout,@44")
#pragma comment(linker, "/EXPORT:SetClientSessionTimeoutCallback=AheadLib_SetClientSessionTimeoutCallback,@45")
#pragma comment(linker, "/EXPORT:SetIgnoreNtfsStreamOperations=AheadLib_SetIgnoreNtfsStreamOperations,@46")
#pragma comment(linker, "/EXPORT:SetupInstall=AheadLib_SetupInstall,@47")
#pragma comment(linker, "/EXPORT:StartHookEx=AheadLib_StartHookEx,@48")
#pragma comment(linker, "/EXPORT:TranslateDosDeviceToNtDevice=AheadLib_TranslateDosDeviceToNtDevice,@49")
#pragma comment(linker, "/EXPORT:Uninstall=AheadLib_Uninstall,@50")
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 原函数地址指针
PVOID pfnAddClientRule;
PVOID pfnAddClientRuleEx;
PVOID pfnAddClientSessionSuffix;
PVOID pfnAddClientTypeRule;
PVOID pfnAddExceptionProcessId;
PVOID pfnAddExceptionRule;
PVOID pfnAddExceptionRuleEx;
PVOID pfnAddHiddenFileName;
PVOID pfnAddPidToIgnoreHiddenFile;
PVOID pfnAddProtectedFile;
PVOID pfnAddProtectedFileEx;
PVOID pfnAddRule;
PVOID pfnCleanupAllClientRules;
PVOID pfnCleanupAllClientTypeRules;
PVOID pfnCleanupAllRules;
PVOID pfnClearAllExceptionProcessId;
PVOID pfnClearAllExceptionRules;
PVOID pfnCloseClientHandle;
PVOID pfnCloseClientSession;
PVOID pfnCreateClientHandle;
PVOID pfnCreateClientSession;
PVOID pfnGetClientSessionHandle;
PVOID pfnInstall;
PVOID pfnNotifyDriverClientResult;
PVOID pfnNotifyDriverResult;
PVOID pfnQueryDriverVersion;
PVOID pfnQueryProtectedInformation;
PVOID pfnRemoveAllHiddenFileName;
PVOID pfnRemoveAllProtectedFile;
PVOID pfnRemoveAllProtectedFileEx;
PVOID pfnRemoveClientAllProcessNameType;
PVOID pfnRemoveClientRule;
PVOID pfnRemoveClientSessionAllSuffix;
PVOID pfnRemoveClientTypeRule;
PVOID pfnRemoveExceptionProcessId;
PVOID pfnRemoveExceptionRule;
PVOID pfnRemoveHiddenFileName;
PVOID pfnRemoveProtectedFile;
PVOID pfnRemoveProtectedFileEx;
PVOID pfnReplyClientResult;
PVOID pfnSetClientProcessIdType;
PVOID pfnSetClientProcessNameType;
PVOID pfnSetClientSessionClientConfig;
PVOID pfnSetClientSessionTimeout;
PVOID pfnSetClientSessionTimeoutCallback;
PVOID pfnSetIgnoreNtfsStreamOperations;
PVOID pfnSetupInstall;
PVOID pfnStartHookEx;
PVOID pfnTranslateDosDeviceToNtDevice;
PVOID pfnUninstall;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 宏定义
#define EXTERNC extern "C"
#define NAKED 
#define EXPORT __declspec(dllexport)

#define ALCPP EXPORT NAKED
#define ALSTD EXTERNC EXPORT NAKED void __stdcall
#define ALCFAST EXTERNC EXPORT NAKED void __fastcall
#define ALCDECL EXTERNC NAKED void __cdecl
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AheadLib 命名空间
namespace AheadLib
{
	HMODULE m_hModule = NULL;	// 原始模块句柄
	DWORD m_dwReturn[50] = {0};	// 原始函数返回地址


	// 获取原始函数地址
	FARPROC WINAPI GetAddress(PCSTR pszProcName)
	{
		FARPROC fpAddress;
		CHAR szProcName[16];
		TCHAR tzTemp[MAX_PATH];

		fpAddress = GetProcAddress(m_hModule, pszProcName);
		if (fpAddress == NULL)
		{
			if (HIWORD(pszProcName) == 0)
			{
				wsprintfA(szProcName, "%d", pszProcName);
				pszProcName = szProcName;
			}

			wsprintf(tzTemp, TEXT("无法找到函数 %hs，程序无法正常运行。"), pszProcName);
			MessageBox(NULL, tzTemp, TEXT("AheadLib"), MB_ICONSTOP);
			ExitProcess(-2);
		}

		return fpAddress;
	}

	// 初始化原始函数地址指针
	inline VOID WINAPI InitializeAddresses()
	{
		pfnAddClientRule = GetAddress("AddClientRule");
		pfnAddClientRuleEx = GetAddress("AddClientRuleEx");
		pfnAddClientSessionSuffix = GetAddress("AddClientSessionSuffix");
		pfnAddClientTypeRule = GetAddress("AddClientTypeRule");
		pfnAddExceptionProcessId = GetAddress("AddExceptionProcessId");
		pfnAddExceptionRule = GetAddress("AddExceptionRule");
		pfnAddExceptionRuleEx = GetAddress("AddExceptionRuleEx");
		pfnAddHiddenFileName = GetAddress("AddHiddenFileName");
		pfnAddPidToIgnoreHiddenFile = GetAddress("AddPidToIgnoreHiddenFile");
		pfnAddProtectedFile = GetAddress("AddProtectedFile");
		pfnAddProtectedFileEx = GetAddress("AddProtectedFileEx");
		pfnAddRule = GetAddress("AddRule");
		pfnCleanupAllClientRules = GetAddress("CleanupAllClientRules");
		pfnCleanupAllClientTypeRules = GetAddress("CleanupAllClientTypeRules");
		pfnCleanupAllRules = GetAddress("CleanupAllRules");
		pfnClearAllExceptionProcessId = GetAddress("ClearAllExceptionProcessId");
		pfnClearAllExceptionRules = GetAddress("ClearAllExceptionRules");
		pfnCloseClientHandle = GetAddress("CloseClientHandle");
		pfnCloseClientSession = GetAddress("CloseClientSession");
		pfnCreateClientHandle = GetAddress("CreateClientHandle");
		pfnCreateClientSession = GetAddress("CreateClientSession");
		pfnGetClientSessionHandle = GetAddress("GetClientSessionHandle");
		pfnInstall = GetAddress("Install");
		pfnNotifyDriverClientResult = GetAddress("NotifyDriverClientResult");
		pfnNotifyDriverResult = GetAddress("NotifyDriverResult");
		pfnQueryDriverVersion = GetAddress("QueryDriverVersion");
		pfnQueryProtectedInformation = GetAddress("QueryProtectedInformation");
		pfnRemoveAllHiddenFileName = GetAddress("RemoveAllHiddenFileName");
		pfnRemoveAllProtectedFile = GetAddress("RemoveAllProtectedFile");
		pfnRemoveAllProtectedFileEx = GetAddress("RemoveAllProtectedFileEx");
		pfnRemoveClientAllProcessNameType = GetAddress("RemoveClientAllProcessNameType");
		pfnRemoveClientRule = GetAddress("RemoveClientRule");
		pfnRemoveClientSessionAllSuffix = GetAddress("RemoveClientSessionAllSuffix");
		pfnRemoveClientTypeRule = GetAddress("RemoveClientTypeRule");
		pfnRemoveExceptionProcessId = GetAddress("RemoveExceptionProcessId");
		pfnRemoveExceptionRule = GetAddress("RemoveExceptionRule");
		pfnRemoveHiddenFileName = GetAddress("RemoveHiddenFileName");
		pfnRemoveProtectedFile = GetAddress("RemoveProtectedFile");
		pfnRemoveProtectedFileEx = GetAddress("RemoveProtectedFileEx");
		pfnReplyClientResult = GetAddress("ReplyClientResult");
		pfnSetClientProcessIdType = GetAddress("SetClientProcessIdType");
		pfnSetClientProcessNameType = GetAddress("SetClientProcessNameType");
		pfnSetClientSessionClientConfig = GetAddress("SetClientSessionClientConfig");
		pfnSetClientSessionTimeout = GetAddress("SetClientSessionTimeout");
		pfnSetClientSessionTimeoutCallback = GetAddress("SetClientSessionTimeoutCallback");
		pfnSetIgnoreNtfsStreamOperations = GetAddress("SetIgnoreNtfsStreamOperations");
		pfnSetupInstall = GetAddress("SetupInstall");
		pfnStartHookEx = GetAddress("StartHookEx");
		pfnTranslateDosDeviceToNtDevice = GetAddress("TranslateDosDeviceToNtDevice");
		pfnUninstall = GetAddress("Uninstall");
	}

	// 加载原始模块
	inline BOOL WINAPI Load()
	{
		TCHAR tzPath[MAX_PATH];
		TCHAR tzTemp[MAX_PATH * 2];

		lstrcpy(tzPath, TEXT("360AvFltOrg.dll"));
		m_hModule = LoadLibrary(tzPath);
		if (m_hModule == NULL)
		{
			wsprintf(tzTemp, TEXT("无法加载 %s，程序无法正常运行。"), tzPath);
			MessageBox(NULL, tzTemp, TEXT("AheadLib"), MB_ICONSTOP);
		}
		else
		{
			InitializeAddresses();
		}

		return (m_hModule != NULL);	
	}
		
	// 释放原始模块
	inline VOID WINAPI Free()
	{
		if (m_hModule)
		{
			FreeLibrary(m_hModule);
		}
	}
}
using namespace AheadLib;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 入口函数
BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved)
{
	if (dwReason == DLL_PROCESS_ATTACH)
	{
		DisableThreadLibraryCalls(hModule);

		return Load();
	}
	else if (dwReason == DLL_PROCESS_DETACH)
	{
		Free();
	}

	return TRUE;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern "C" extern void prevFunc();
extern "C" extern void setFunc(LPVOID p);
extern "C" extern void endFunc();

#pragma optimize( "", off )

template< class T > T* retT()
{
	return new T;
}




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AddClientRule(void)
{
	prevFunc();
	setFunc(&pfnAddClientRule);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AddClientRuleEx(void)
{
	prevFunc();
	setFunc(&pfnAddClientRuleEx);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AddClientSessionSuffix(void)
{
	prevFunc();
	setFunc(&pfnAddClientSessionSuffix);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AddClientTypeRule(void)
{
	prevFunc();
	setFunc(&pfnAddClientTypeRule);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AddExceptionProcessId(void)
{
	prevFunc();
	setFunc(&pfnAddExceptionProcessId);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AddExceptionRule(void)
{
	prevFunc();
	setFunc(&pfnAddExceptionRule);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AddExceptionRuleEx(void)
{
	prevFunc();
	setFunc(&pfnAddExceptionRuleEx);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AddHiddenFileName(void)
{
	prevFunc();
	setFunc(&pfnAddHiddenFileName);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AddPidToIgnoreHiddenFile(void)
{
	prevFunc();
	setFunc(&pfnAddPidToIgnoreHiddenFile);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AddProtectedFile(void)
{
	prevFunc();
	setFunc(&pfnAddProtectedFile);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AddProtectedFileEx(void)
{
	prevFunc();
	setFunc(&pfnAddProtectedFileEx);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_AddRule(void)
{
	prevFunc();
	setFunc(&pfnAddRule);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_CleanupAllClientRules(void)
{
	prevFunc();
	setFunc(&pfnCleanupAllClientRules);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_CleanupAllClientTypeRules(void)
{
	prevFunc();
	setFunc(&pfnCleanupAllClientTypeRules);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_CleanupAllRules(void)
{
	prevFunc();
	setFunc(&pfnCleanupAllRules);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_ClearAllExceptionProcessId(void)
{
	prevFunc();
	setFunc(&pfnClearAllExceptionProcessId);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_ClearAllExceptionRules(void)
{
	prevFunc();
	setFunc(&pfnClearAllExceptionRules);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_CloseClientHandle(void)
{
	prevFunc();
	setFunc(&pfnCloseClientHandle);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_CloseClientSession(void)
{
	prevFunc();
	setFunc(&pfnCloseClientSession);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_CreateClientHandle(void)
{
	prevFunc();
	setFunc(&pfnCreateClientHandle);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_CreateClientSession(void)
{
	prevFunc();
	setFunc(&pfnCreateClientSession);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_GetClientSessionHandle(void)
{
	prevFunc();
	setFunc(&pfnGetClientSessionHandle);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Install(void)
{
	prevFunc();
	setFunc(&pfnInstall);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_NotifyDriverClientResult(void)
{
	prevFunc();
	setFunc(&pfnNotifyDriverClientResult);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_NotifyDriverResult(void)
{
	prevFunc();
	setFunc(&pfnNotifyDriverResult);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_QueryDriverVersion(void)
{
	prevFunc();
	setFunc(&pfnQueryDriverVersion);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_QueryProtectedInformation(void)
{
	prevFunc();
	setFunc(&pfnQueryProtectedInformation);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_RemoveAllHiddenFileName(void)
{
	prevFunc();
	setFunc(&pfnRemoveAllHiddenFileName);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_RemoveAllProtectedFile(void)
{
	prevFunc();
	setFunc(&pfnRemoveAllProtectedFile);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_RemoveAllProtectedFileEx(void)
{
	prevFunc();
	setFunc(&pfnRemoveAllProtectedFileEx);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_RemoveClientAllProcessNameType(void)
{
	prevFunc();
	setFunc(&pfnRemoveClientAllProcessNameType);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_RemoveClientRule(void)
{
	prevFunc();
	setFunc(&pfnRemoveClientRule);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_RemoveClientSessionAllSuffix(void)
{
	prevFunc();
	setFunc(&pfnRemoveClientSessionAllSuffix);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_RemoveClientTypeRule(void)
{
	prevFunc();
	setFunc(&pfnRemoveClientTypeRule);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_RemoveExceptionProcessId(void)
{
	prevFunc();
	setFunc(&pfnRemoveExceptionProcessId);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_RemoveExceptionRule(void)
{
	prevFunc();
	setFunc(&pfnRemoveExceptionRule);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_RemoveHiddenFileName(void)
{
	prevFunc();
	setFunc(&pfnRemoveHiddenFileName);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_RemoveProtectedFile(void)
{
	prevFunc();
	setFunc(&pfnRemoveProtectedFile);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_RemoveProtectedFileEx(void)
{
	prevFunc();
	setFunc(&pfnRemoveProtectedFileEx);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_ReplyClientResult(void)
{
	prevFunc();
	setFunc(&pfnReplyClientResult);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_SetClientProcessIdType(void)
{
	prevFunc();
	setFunc(&pfnSetClientProcessIdType);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_SetClientProcessNameType(void)
{
	prevFunc();
	setFunc(&pfnSetClientProcessNameType);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_SetClientSessionClientConfig(void)
{
	prevFunc();
	setFunc(&pfnSetClientSessionClientConfig);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_SetClientSessionTimeout(void)
{
	prevFunc();
	setFunc(&pfnSetClientSessionTimeout);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_SetClientSessionTimeoutCallback(void)
{
	prevFunc();
	setFunc(&pfnSetClientSessionTimeoutCallback);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_SetIgnoreNtfsStreamOperations(void)
{
	prevFunc();
	setFunc(&pfnSetIgnoreNtfsStreamOperations);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_SetupInstall(void)
{
	prevFunc();
	setFunc(&pfnSetupInstall);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_StartHookEx(void)
{
	prevFunc();
	setFunc(&pfnStartHookEx);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_TranslateDosDeviceToNtDevice(void)
{
	prevFunc();
	setFunc(&pfnTranslateDosDeviceToNtDevice);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 导出函数
ALCDECL AheadLib_Uninstall(void)
{
	prevFunc();
	setFunc(&pfnUninstall);
	endFunc();
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
